const { AudioPlayerStatus } = require('@discordjs/voice');
const { playEmoji, pauseEmoji, skipEmoji, volumeUpEmoji, volumeDownEmoji, stopEmoji } = require('../utils/emojisUtils');
const MusicControl = require('../modules/MusicControl');


class MessagesUtils {
    //construtor somente pra enviar as msg
    constructor(textChannel, options = {}) {
        this.textChannel = textChannel;
        this.audioPlayer = options.audioPlayer || null;
        this.musicQueue = options.musicQueue || [];
        this.currentSongIndex = options.currentSongIndex || 0;
        this.voiceConnection = options.voiceConnection || null;
    }

    async sendMessage(message) {
        return this.textChannel.send(message);
    }

    async sendNowPlaying(songInfo) {
        const embed = {
            color: 0x0099ff,
            title: 'Now Playing',
            author: {
                name: songInfo[0].title,
                icon_url: songInfo[0].thumbnails[0].url // URL da thumbnail
            },
            description: `By ${songInfo[0].channel.name}`,
            fields: [
                {
                    name: 'Duration',
                    value: songInfo[0].durationRaw
                }
            ],
            footer: {
                text: 'Your Bot Name',
                icon_url: null // URL do √≠cone do seu bot
            }
        };

        const reactions = ['‚èÆÔ∏è', '‚è∏Ô∏è', '‚è≠Ô∏è', 'üîä', 'üîâ', '‚èπÔ∏è']; // Adicione as rea√ß√µes desejadas aqui

        const message = await this.sendEmbedWithReactions(embed, reactions);
        this.setupReactionListener(message, reactions);
    }

    sendSkipMessage() {
        this.sendMessage('M√∫sica Skipada.');
    }

    sendStopMessage() {
        this.sendMessage('Parei de Tocar.');
    }

    async sendQueueMessage(songInfo) {
        const embed = {
            color: 0x0099ff,
            title: 'Now Playing',
            author: {
                name: songInfo[0].title,
                icon_url: songInfo[0].thumbnails[0].url // URL da thumbnail
            },
            description: `By ${songInfo[0].channel.name}`,
            fields: [
                {
                    name: 'Duration',
                    value: songInfo[0].durationRaw
                }
            ],
            footer: {
                text: 'Your Bot Name',
                icon_url: null // URL do √≠cone do seu bot
            }
        };

        const playPauseEmoji = this.musicControl.isPlaying ? pauseEmoji : playEmoji;

        const message = await this.sendEmbedWithReactions(embed, [
            { emoji: '‚èÆÔ∏è', action: 'back' },
            { emoji: playPauseEmoji, action: 'playPause' }, // Bot√£o de pausa/reprodu√ß√£o
            { emoji: skipEmoji, action: 'skip' },
            { emoji: volumeUpEmoji, action: 'volumeUp' },
            { emoji: volumeDownEmoji, action: 'volumeDown' },
            { emoji: stopEmoji, action: 'stop' },
        ]);

        this.setupReactionListener(message, reactions);
    }

    async sendEmbedWithReactions(embed, reactions) {
        const message = await this.sendMessage({ embeds: [embed] });

        for (const reaction of reactions) {
            await message.react(reaction);
        }

        return message;
    }

    setupReactionListener(message, reactions) {
        const reactionFilter = (reaction, user) => reactions.includes(reaction.emoji.name);
        const collector = message.createReactionCollector({ filter: reactionFilter, time: 60000 });

        collector.on('collect', (reaction, user) => {
            const action = reaction.emoji.name;

            if (action) {
                this.executeAction(action);
            }
        });

        collector.on('end', (collected, reason) => {
            // Lida com o fim do coletor de rea√ß√µes, se necess√°rio
        });
    }

    executeAction(action) {
        switch (action) {
            case '‚èÆÔ∏è':
                this.backAction();
                break;
            case '‚è∏Ô∏è':
                this.pauseAction();
                break;
            case '‚è≠Ô∏è':
                this.skipAction();
                break;
            case 'üîä':
                this.volumeUpAction();
                break;
            case 'üîâ':
                this.volumeDownAction();
                break;
            case '‚èπÔ∏è':
                this.stopAction();
                break;
            default:
                break;
        }
    }

    backAction() {
        // L√≥gica para voltar a m√∫sica
        // Verifique se h√° uma fila de reprodu√ß√£o e se a m√∫sica atual n√£o √© a primeira da fila
    
        if (this.musicQueue.length > 0 && this.currentSongIndex > 0) {
            // Decrementar o √≠ndice da m√∫sica atual
            this.currentSongIndex--;
    
            // Obter a m√∫sica anterior da fila
            const previousSong = this.musicQueue[this.currentSongIndex];
    
            // Toque a m√∫sica anterior
            this.playMusic(previousSong);
        } else {
            // Caso contr√°rio, n√£o h√° uma m√∫sica anterior para tocar
            this.sendMessage('N√£o h√° uma m√∫sica anterior na fila.');
        }
    }
    

    pauseAction() {
        // Verifique se o bot est√° em um canal de voz
        if (!this.voiceConnection) {
            this.sendMessage('N√£o estou em um canal de voz.');
            return;
        }
    
        // Verifique se j√° est√° pausado
        if (this.audioPlayer.state.status === AudioPlayerStatus.Paused) {
            this.sendMessage('A m√∫sica j√° est√° pausada.');
            return;
        }
    
        // Pausar a m√∫sica
        this.audioPlayer.pause();
        this.sendMessage('M√∫sica pausada.');
    }
    

    skipAction() {
        // Implemente a l√≥gica para skipar a m√∫sica
    }

    volumeUpAction() {
        // Implemente a l√≥gica para aumentar o volume
    }

    volumeDownAction() {
        // Implemente a l√≥gica para diminuir o volume
    }

    stopAction() {
        // Implemente a l√≥gica para parar de tocar e sair do canal de voz
    }
}

module.exports = MessagesUtils;
